#deep-1

meta {
	version = "2017-11-15";
	description = "CPU description file for Zynq-7000 SOC";
}

cpu zynq7010 {
	description = "Zynq-7010";
	cpuarch = arm32;
	
	sysconst {
		OCM_BaseAddr = 0;								# On-chip memory base address
		OCM_Size = 0x30000;								# On-chip memory size (196k), 64k are mapped high
		
		excpCodeBase = OCM_BaseAddr;					# Base address for exception code
		excpCodeSize = 0x1000;							# Exception code size
		
		sysTabBaseAddr = excpCodeBase + excpCodeSize;	# Place system table behind exception code
		
		stackSizeSVC = 0x1000;							# stack size for SVC mode
		stackSizeIRQ = 0x1000;							# stack size for IRQ mode
		heapSize = 0x10000;								# Default heap size (128k)

		ioReg = 0xe0000000;								# I/O peripheral registers
		uartController = ioReg + 0;						# UART controller
		gpioController = ioReg + 0xa000;				# GPIO controller
		spiController = ioReg + 0;						# SPI Controller
		slcrReg = 0xf8000000;							# System level control registers
		ddrReg = 0xf8006000;							# DDR memory control registers
		cpuPrivateReg = 0xf8900000;						# CPU private registers
		interruptCtlr = cpuPrivateReg + 0x600100;		# Interrupt controller registers
		globalTimer = cpuPrivateReg + 0x600200;			# Global Timer
		privateTimer = cpuPrivateReg + 0x600600;		# Private Timer
		interruptCtlrDistr = cpuPrivateReg + 0x601000;	# Interrupt controller distributor registers
	}
	
	memorymap {

		# ===== Internal RAM =====
		device InternalRam {
			attributes = read, write;
			width = 4; # byte
			size = OCM_BaseAddr + OCM_Size;
			base = OCM_BaseAddr;
			technology = ram;
		}
		
		segment InternalRam.ExceptionCode {
			base = OCM_BaseAddr;
			size = excpCodeSize;
		}

		segment InternalRam.SysTab {
			base = sysTabBaseAddr;
			attributes = read, write, systab;
		}

		segment InternalRam.Default {								# Default segment for code, constants and class fields
			attributes = read, write, const, code, var;
		}

		segment InternalRam.Heap {
			base = OCM_BaseAddr + OCM_Size - stackSizeSVC - stackSizeIRQ - heapSize;
			size = heapSize;
			attributes = read, write, heap;
		}
		
		segment InternalRam.StackIRQ {								# IRQ mode stack
			base = OCM_BaseAddr + OCM_Size - stackSizeSVC - stackSizeIRQ ;
			size = stackSizeIRQ;
			attributes = read, write, stack;
		}
		
		segment InternalRam.StackSVC {								# Supervisor mode stack
			base = OCM_BaseAddr + OCM_Size - stackSizeSVC ;
			size = stackSizeSVC;
			attributes = read, write, stack;
		}
	}

	registermap {
			
		# I/O peripheral registers

		register GPIO_MASK_LSW0 {
			 type = IOR;
			 addr = gpioController + 0;
			 size = 4;
		}
		
		register GPIO_MASK_MSW0 {
			 type = IOR;
			 addr = gpioController + 4;
			 size = 4;
		}
		
		register GPIO_MASK_LSW1 {
			 type = IOR;
			 addr = gpioController + 8;
			 size = 4;
		}
		
		register GPIO_MASK_MSW1 {
			 type = IOR;
			 addr = gpioController + 0xc;
			 size = 4;
		}
		
		register GPIO_OUT0 {
			 type = IOR;
			 addr = gpioController + 0x40;
			 size = 4;
		}
		
		register GPIO_OUT1 {
			 type = IOR;
			 addr = gpioController + 0x44;
			 size = 4;
		}
		
		register GPIO_IN0 {
			 type = IOR;
			 addr = gpioController + 0x60;
			 size = 4;
		}
		
		register GPIO_IN1 {
			 type = IOR;
			 addr = gpioController + 0x64;
			 size = 4;
		}
		
		register GPIO_DIR0 {
			 type = IOR;
			 addr = gpioController + 0x204;
			 size = 4;
		}

		register GPIO_OUT_EN0 {
			 type = IOR;
			 addr = gpioController + 0x208;
			 size = 4;
		}

		register GPIO_DIR1 {
			 type = IOR;
			 addr = gpioController + 0x244;
			 size = 4;
		}

		register GPIO_OUT_EN1 {
			 type = IOR;
			 addr = gpioController + 0x248;
			 size = 4;
		}

		# ARM MP core registers
		
		register GTCR_L {
			 type = IOR;
			 addr = globalTimer;
			 size = 4;
		}
		register GTCR_U {
			 type = IOR;
			 addr = globalTimer + 4;
			 size = 4;
		}
		register GTCR {
			 type = IOR;
			 addr = globalTimer + 8;
			 size = 4;
		}
		
		register PTLR {
			 type = IOR;
			 addr = privateTimer;
			 size = 4;
		}
		register PTCOUNT {
			 type = IOR;
			 addr = privateTimer + 4;
			 size = 4;
		}
		register PTCR {
			 type = IOR;
			 addr = privateTimer + 8;
			 size = 4;
		}
		register PTISR {
			 type = IOR;
			 addr = privateTimer + 0xc;
			 size = 4;
		}
		
		# System level control registers
		
		register SLCR_LOCK {
			 type = IOR;
			 addr = slcrReg + 4;
			 size = 4;
		}
		
		register SLCR_UNLOCK {
			 type = IOR;
			 addr = slcrReg + 8;
			 size = 4;
		}
		
		register SLCR_LOCKSTA {
			 type = IOR;
			 addr = slcrReg + 0xc;
			 size = 4;
		}
		
		register ARM_PLL_CTRL {
			 type = IOR;
			 addr = slcrReg + 0x100;
			 size = 4;
		}
		
		register DDR_PLL_CTRL {
			 type = IOR;
			 addr = slcrReg + 0x104;
			 size = 4;
		}
		
		register IO_PLL_CTRL {
			 type = IOR;
			 addr = slcrReg + 0x108;
			 size = 4;
		}
		
		register PLL_STATUS {
			 type = IOR;
			 addr = slcrReg + 0x10c;
			 size = 4;
		}
		
		register ARM_PLL_CFG {
			 type = IOR;
			 addr = slcrReg + 0x110;
			 size = 4;
		}
		
		register DDR_PLL_CFG {
			 type = IOR;
			 addr = slcrReg + 0x114;
			 size = 4;
		}
		
		register IO_PLL_CFG {
			 type = IOR;
			 addr = slcrReg + 0x118;
			 size = 4;
		}
		
		register ARM_CLK_CTRL {
			 type = IOR;
			 addr = slcrReg + 0x120;
			 size = 4;
		}
		
		register DDR_CLK_CTRL {
			 type = IOR;
			 addr = slcrReg + 0x124;
			 size = 4;
		}
		
		register DCI_CLK_CTRL {
			 type = IOR;
			 addr = slcrReg + 0x128;
			 size = 4;
		}
		
		register APER_CLK_CTRL {
			 type = IOR;
			 addr = slcrReg + 0x12c;
			 size = 4;
		}
		
		register LQSPI_CLK_CTRL {
			 type = IOR;
			 addr = slcrReg + 0x14c;
			 size = 4;
		}
		
		register UART_CLK_CTRL {
			 type = IOR;
			 addr = slcrReg + 0x154;
			 size = 4;
		}
		
		register SPI_CLK_CTRL {
			 type = IOR;
			 addr = slcrReg + 0x158;
			 size = 4;
		}
		
		register DBG_CLK_CTRL {
			 type = IOR;
			 addr = slcrReg + 0x164;
			 size = 4;
		}
		
		register PCAP_CLK_CTRL {
			 type = IOR;
			 addr = slcrReg + 0x168;
			 size = 4;
		}
		
		register TOPSW_CLK_CTRL {
			 type = IOR;
			 addr = slcrReg + 0x168;
			 size = 4;
		}

		register FPGA0_CLK_CTRL {
			 type = IOR;
			 addr = slcrReg + 0x170;
			 size = 4;
		}

		register FPGA1_CLK_CTRL {
			 type = IOR;
			 addr = slcrReg + 0x180;
			 size = 4;
		}

		register FPGA2_CLK_CTRL {
			 type = IOR;
			 addr = slcrReg + 0x190;
			 size = 4;
		}

		register FPGA3_CLK_CTRL {
			 type = IOR;
			 addr = slcrReg + 0x1a0;
			 size = 4;
		}

		register CLK_621_TRUE {
			 type = IOR;
			 addr = slcrReg + 0x1c4;
			 size = 4;
		}

		register PSS_RST_CTRL {
			 type = IOR;
			 addr = slcrReg + 0x200;
			 size = 4;
		}

		register DDR_RST_CTRL {
			 type = IOR;
			 addr = slcrReg + 0x204;
			 size = 4;
		}

		register SDIO_RST_CTRL {
			 type = IOR;
			 addr = slcrReg + 0x218;
			 size = 4;
		}

		register SPI_RST_CTRL {
			 type = IOR;
			 addr = slcrReg + 0x21c;
			 size = 4;
		}

		register CAN_RST_CTRL {
			 type = IOR;
			 addr = slcrReg + 0x220;
			 size = 4;
		}

		register I2C_RST_CTRL {
			 type = IOR;
			 addr = slcrReg + 0x224;
			 size = 4;
		}

		register UART_RST_CTRL {
			 type = IOR;
			 addr = slcrReg + 0x228;
			 size = 4;
		}

		register GPIO_RST_CTRL {
			 type = IOR;
			 addr = slcrReg + 0x22c;
			 size = 4;
		}

		register LQSPI_RST_CTRL {
			 type = IOR;
			 addr = slcrReg + 0x230;
			 size = 4;
		}

		register SMC_RST_CTRL {
			 type = IOR;
			 addr = slcrReg + 0x234;
			 size = 4;
		}

		register OCM_RST_CTRL {
			 type = IOR;
			 addr = slcrReg + 0x238;
			 size = 4;
		}

		register FPGA_RST_CTRL {
			 type = IOR;
			 addr = slcrReg + 0x240;
			 size = 4;
		}
		
		register CPU_RST_CTRL {
			 type = IOR;
			 addr = slcrReg + 0x244;
			 size = 4;
		}

		register RS_AWDT_CTRL {
			 type = IOR;
			 addr = slcrReg + 0x24c;
			 size = 4;
		}

		register REBOOT_STATUS {
			 type = IOR;
			 addr = slcrReg + 0x258;
			 size = 4;
		}

		register BOOT_MODE {
			 type = IOR;
			 addr = slcrReg + 0x25c;
			 size = 4;
		}

		register MIO_PIN_00 {
			 type = IOR;
			 addr = slcrReg + 0x700;
			 size = 4;
		}
		
		register MIO_PIN_01 {
			 type = IOR;
			 addr = slcrReg + 0x704;
			 size = 4;
		}
		
		register MIO_PIN_07 {
			 type = IOR;
			 addr = slcrReg + 0x71c;
			 size = 4;
		}
		
		register MIO_PIN_09 {
			 type = IOR;
			 addr = slcrReg + 0x724;
			 size = 4;
		}
		
		register MIO_PIN_10 {
			 type = IOR;
			 addr = slcrReg + 0x728;
			 size = 4;
		}
		
		register MIO_PIN_11 {
			 type = IOR;
			 addr = slcrReg + 0x72c;
			 size = 4;
		}
		
		register MIO_PIN_12 {
			 type = IOR;
			 addr = slcrReg + 0x730;
			 size = 4;
		}
		
		register MIO_PIN_13 {
			 type = IOR;
			 addr = slcrReg + 0x734;
			 size = 4;
		}
		
		register MIO_PIN_14 {
			 type = IOR;
			 addr = slcrReg + 0x738;
			 size = 4;
		}
		
		register MIO_PIN_15 {
			 type = IOR;
			 addr = slcrReg + 0x73c;
			 size = 4;
		}
		
		register MIO_PIN_47 {
			 type = IOR;
			 addr = slcrReg + 0x7bc;
			 size = 4;
		}
		
		register MIO_PIN_48 {
			 type = IOR;
			 addr = slcrReg + 0x7c0;
			 size = 4;
		}
		
		register MIO_PIN_49 {
			 type = IOR;
			 addr = slcrReg + 0x7c4;
			 size = 4;
		}

		register MIO_PIN_51 {
			 type = IOR;
			 addr = slcrReg + 0x7cc;
			 size = 4;
		}
		
		register LVL_SHFTR_EN {
			 type = IOR;
			 addr = slcrReg + 0x900;
			 size = 4;
		}
		
		register OCM_CFG {
			 type = IOR;
			 addr = slcrReg + 0x910;
			 size = 4;
		}
		
		register GPIOB_CTRL {
			 type = IOR;
			 addr = slcrReg + 0xb00;
			 size = 4;
		}

		register DDRIOB_ADDR0 {
			 type = IOR;
			 addr = slcrReg + 0xb40;
			 size = 4;
		}

		register DDRIOB_ADDR1 {
			 type = IOR;
			 addr = slcrReg + 0xb44;
			 size = 4;
		}

		register DDRIOB_DATA0 {
			 type = IOR;
			 addr = slcrReg + 0xb48;
			 size = 4;
		}

		register DDRIOB_DATA1 {
			 type = IOR;
			 addr = slcrReg + 0xb4c;
			 size = 4;
		}

		register DDRIOB_DIFF0 {
			 type = IOR;
			 addr = slcrReg + 0xb50;
			 size = 4;
		}

		register DDRIOB_DIFF1 {
			 type = IOR;
			 addr = slcrReg + 0xb54;
			 size = 4;
		}

		register DDRIOB_CLOCK {
			 type = IOR;
			 addr = slcrReg + 0xb58;
			 size = 4;
		}

		register DDRIOB_DRIVE_SLEW_ADDR {
			 type = IOR;
			 addr = slcrReg + 0xb5c;
			 size = 4;
		}

		register DDRIOB_DRIVE_SLEW_DATA {
			 type = IOR;
			 addr = slcrReg + 0xb60;
			 size = 4;
		}

		register DDRIOB_DRIVE_SLEW_DIFF {
			 type = IOR;
			 addr = slcrReg + 0xb64;
			 size = 4;
		}

		register DDRIOB_DRIVE_SLEW_CLOCK {
			 type = IOR;
			 addr = slcrReg + 0xb68;
			 size = 4;
		}

		register DDRIOB_DDR_CTRL {
			 type = IOR;
			 addr = slcrReg + 0xb6c;
			 size = 4;
		}

		register DDRIOB_DCI_CTRL {
			 type = IOR;
			 addr = slcrReg + 0xb70;
			 size = 4;
		}

		register DDRIOB_DCI_STATUS {
			 type = IOR;
			 addr = slcrReg + 0xb74;
			 size = 4;
		}

		# DDR memory control registers
		
		register DDRC_CTRL {
			 type = IOR;
			 addr = ddrReg + 0x00;
			 size = 4;
		}

		register TWO_RANK_CFG {
			 type = IOR;
			 addr = ddrReg + 0x04;
			 size = 4;
		}

		register HPR {
			 type = IOR;
			 addr = ddrReg + 0x08;
			 size = 4;
		}

		register LPR {
			 type = IOR;
			 addr = ddrReg + 0x0c;
			 size = 4;
		}

		register WR {
			 type = IOR;
			 addr = ddrReg + 0x10;
			 size = 4;
		}

		register DRAM_PARAM0 {
			 type = IOR;
			 addr = ddrReg + 0x14;
			 size = 4;
		}

		register DRAM_PARAM1 {
			 type = IOR;
			 addr = ddrReg + 0x18;
			 size = 4;
		}

		register DRAM_PARAM2 {
			 type = IOR;
			 addr = ddrReg + 0x1c;
			 size = 4;
		}

		register DRAM_PARAM3 {
			 type = IOR;
			 addr = ddrReg + 0x20;
			 size = 4;
		}

		register DRAM_PARAM4 {
			 type = IOR;
			 addr = ddrReg + 0x24;
			 size = 4;
		}

		register DRAM_INIT_PARAM {
			 type = IOR;
			 addr = ddrReg + 0x28;
			 size = 4;
		}

		register DRAM_EMR {
			 type = IOR;
			 addr = ddrReg + 0x2c;
			 size = 4;
		}

		register DRAM_EMR_MR {
			 type = IOR;
			 addr = ddrReg + 0x30;
			 size = 4;
		}

		register DRAM_BURST8_RDRW {
			 type = IOR;
			 addr = ddrReg + 0x34;
			 size = 4;
		}

		register DRAM_DISABLE_DQ {
			 type = IOR;
			 addr = ddrReg + 0x38;
			 size = 4;
		}

		register DRAM_ADR_MAP_BANK {
			 type = IOR;
			 addr = ddrReg + 0x3c;
			 size = 4;
		}

		register DRAM_ADR_MAP_COL {
			 type = IOR;
			 addr = ddrReg + 0x40;
			 size = 4;
		}

		register DRAM_ADR_MAP_ROW {
			 type = IOR;
			 addr = ddrReg + 0x44;
			 size = 4;
		}

		register DRAM_ODT {
			 type = IOR;
			 addr = ddrReg + 0x48;
			 size = 4;
		}

		register PHY_DBG {
			 type = IOR;
			 addr = ddrReg + 0x4c;
			 size = 4;
		}

		register PHY_CMD_TIMEOUT {
			 type = IOR;
			 addr = ddrReg + 0x50;
			 size = 4;
		}

		register MODE_STS {
			 type = IOR;
			 addr = ddrReg + 0x54;
			 size = 4;
		}

		register DLL_CALIB {
			 type = IOR;
			 addr = ddrReg + 0x58;
			 size = 4;
		}

		register ODT_DELAY_HOLD {
			 type = IOR;
			 addr = ddrReg + 0x5c;
			 size = 4;
		}

		register CTRL_REG1 {
			 type = IOR;
			 addr = ddrReg + 0x60;
			 size = 4;
		}

		register CTRL_REG2 {
			 type = IOR;
			 addr = ddrReg + 0x64;
			 size = 4;
		}

		register CTRL_REG3 {
			 type = IOR;
			 addr = ddrReg + 0x68;
			 size = 4;
		}

		register CTRL_REG4 {
			 type = IOR;
			 addr = ddrReg + 0x6c;
			 size = 4;
		}

		register CTRL_REG5 {
			 type = IOR;
			 addr = ddrReg + 0x78;
			 size = 4;
		}

		register CTRL_REG6 {
			 type = IOR;
			 addr = ddrReg + 0x7c;
			 size = 4;
		}

		register CHE_REFRESH_TIMER01 {
			 type = IOR;
			 addr = ddrReg + 0xa0;
			 size = 4;
		}

		register CHE_T_ZQ {
			 type = IOR;
			 addr = ddrReg + 0xa4;
			 size = 4;
		}

		register CHE_T_ZQ_SHORT {
			 type = IOR;
			 addr = ddrReg + 0xa8;
			 size = 4;
		}

		register DEEP_PWRDWN {
			 type = IOR;
			 addr = ddrReg + 0xac;
			 size = 4;
		}

		register REG_2C {
			 type = IOR;
			 addr = ddrReg + 0xb0;
			 size = 4;
		}

		register REG_2D {
			 type = IOR;
			 addr = ddrReg + 0xb4;
			 size = 4;
		}

		register DFI_TIMING {
			 type = IOR;
			 addr = ddrReg + 0xb8;
			 size = 4;
		}

		register CHE_ECC_CONTROL {
			 type = IOR;
			 addr = ddrReg + 0xc4;
			 size = 4;
		}

		register CHE_CORR_ECC_LOG {
			 type = IOR;
			 addr = ddrReg + 0xc8;
			 size = 4;
		}

		register CHE_UNCORR_ECC_LOG {
			 type = IOR;
			 addr = ddrReg + 0xdc;
			 size = 4;
		}

		register CHE_ECC_STATS {
			 type = IOR;
			 addr = ddrReg + 0xf0;
			 size = 4;
		}

		register ECC_SCRUB {
			 type = IOR;
			 addr = ddrReg + 0xf4;
			 size = 4;
		}

		register PHY_RCVR_ENABLE {
			 type = IOR;
			 addr = ddrReg + 0x114;
			 size = 4;
		}

		register PHY_CONFIG0 {
			 type = IOR;
			 addr = ddrReg + 0x118;
			 size = 4;
		}

		register PHY_CONFIG1 {
			 type = IOR;
			 addr = ddrReg + 0x11c;
			 size = 4;
		}

		register PHY_CONFIG2 {
			 type = IOR;
			 addr = ddrReg + 0x120;
			 size = 4;
		}

		register PHY_CONFIG3 {
			 type = IOR;
			 addr = ddrReg + 0x124;
			 size = 4;
		}

		register PHY_INIT_RATIO0 {
			 type = IOR;
			 addr = ddrReg + 0x12c;
			 size = 4;
		}

		register PHY_INIT_RATIO1 {
			 type = IOR;
			 addr = ddrReg + 0x130;
			 size = 4;
		}

		register PHY_INIT_RATIO2 {
			 type = IOR;
			 addr = ddrReg + 0x134;
			 size = 4;
		}

		register PHY_INIT_RATIO3 {
			 type = IOR;
			 addr = ddrReg + 0x138;
			 size = 4;
		}

		register PHY_RD_DQS_CFG0 {
			 type = IOR;
			 addr = ddrReg + 0x140;
			 size = 4;
		}

		register PHY_RD_DQS_CFG1 {
			 type = IOR;
			 addr = ddrReg + 0x144;
			 size = 4;
		}

		register PHY_RD_DQS_CFG2 {
			 type = IOR;
			 addr = ddrReg + 0x148;
			 size = 4;
		}

		register PHY_RD_DQS_CFG3 {
			 type = IOR;
			 addr = ddrReg + 0x14c;
			 size = 4;
		}

		register PHY_WR_DQS_CFG0 {
			 type = IOR;
			 addr = ddrReg + 0x154;
			 size = 4;
		}

		register PHY_WR_DQS_CFG1 {
			 type = IOR;
			 addr = ddrReg + 0x158;
			 size = 4;
		}

		register PHY_WR_DQS_CFG2 {
			 type = IOR;
			 addr = ddrReg + 0x15c;
			 size = 4;
		}

		register PHY_WR_DQS_CFG3 {
			 type = IOR;
			 addr = ddrReg + 0x160;
			 size = 4;
		}

		register PHY_WE_CFG0 {
			 type = IOR;
			 addr = ddrReg + 0x168;
			 size = 4;
		}

		register PHY_WE_CFG1 {
			 type = IOR;
			 addr = ddrReg + 0x16c;
			 size = 4;
		}

		register PHY_WE_CFG2 {
			 type = IOR;
			 addr = ddrReg + 0x170;
			 size = 4;
		}

		register PHY_WE_CFG3 {
			 type = IOR;
			 addr = ddrReg + 0x174;
			 size = 4;
		}

		register WR_DATA_SLV0 {
			 type = IOR;
			 addr = ddrReg + 0x17c;
			 size = 4;
		}

		register WR_DATA_SLV1 {
			 type = IOR;
			 addr = ddrReg + 0x180;
			 size = 4;
		}

		register WR_DATA_SLV2 {
			 type = IOR;
			 addr = ddrReg + 0x184;
			 size = 4;
		}

		register WR_DATA_SLV3 {
			 type = IOR;
			 addr = ddrReg + 0x188;
			 size = 4;
		}

		register REG_64 {
			 type = IOR;
			 addr = ddrReg + 0x190;
			 size = 4;
		}

		register REG_65 {
			 type = IOR;
			 addr = ddrReg + 0x194;
			 size = 4;
		}

		register PAGE_MASK {
			 type = IOR;
			 addr = ddrReg + 0x204;
			 size = 4;
		}

		register AXI_PRIO_WR_PORT0 {
			 type = IOR;
			 addr = ddrReg + 0x208;
			 size = 4;
		}

		register AXI_PRIO_WR_PORT1 {
			 type = IOR;
			 addr = ddrReg + 0x20c;
			 size = 4;
		}

		register AXI_PRIO_WR_PORT2 {
			 type = IOR;
			 addr = ddrReg + 0x210;
			 size = 4;
		}

		register AXI_PRIO_WR_PORT3 {
			 type = IOR;
			 addr = ddrReg + 0x214;
			 size = 4;
		}

		register AXI_PRIO_RD_PORT0 {
			 type = IOR;
			 addr = ddrReg + 0x218;
			 size = 4;
		}

		register AXI_PRIO_RD_PORT1 {
			 type = IOR;
			 addr = ddrReg + 0x21c;
			 size = 4;
		}

		register AXI_PRIO_RD_PORT2 {
			 type = IOR;
			 addr = ddrReg + 0x220;
			 size = 4;
		}

		register AXI_PRIO_RD_PORT3 {
			 type = IOR;
			 addr = ddrReg + 0x224;
			 size = 4;
		}

		register LPDDR_CTRL0 {
			 type = IOR;
			 addr = ddrReg + 0x2a8;
			 size = 4;
		}

		register LPDDR_CTRL1 {
			 type = IOR;
			 addr = ddrReg + 0x2ac;
			 size = 4;
		}

		register LPDDR_CTRL2 {
			 type = IOR;
			 addr = ddrReg + 0x2b0;
			 size = 4;
		}

		register LPDDR_CTRL3 {
			 type = IOR;
			 addr = ddrReg + 0x2b4;
			 size = 4;
		}

		# GIC interface registers
		
		register ICCICR {
			 type = IOR;
			 addr = interruptCtlr + 0x00;
			 size = 4;
		}

		register ICCPMR {
			 type = IOR;
			 addr = interruptCtlr + 0x04;
			 size = 4;
		}

		register ICCBPR {
			 type = IOR;
			 addr = interruptCtlr + 0x08;
			 size = 4;
		}

		register ICCIAR {
			 type = IOR;
			 addr = interruptCtlr + 0x0c;
			 size = 4;
		}

		register ICCEOIR {
			 type = IOR;
			 addr = interruptCtlr + 0x10;
			 size = 4;
		}

		register ICCIDR {
			 type = IOR;
			 addr = interruptCtlr + 0xfc;
			 size = 4;
		}

		# GIC distributor registers
		
		register ICDDCR {
			 type = IOR;
			 addr = interruptCtlrDistr + 0x00;
			 size = 4;
		}

		register ICDICTR {
			 type = IOR;
			 addr = interruptCtlrDistr + 0x04;
			 size = 4;
		}

		register ICDIIDR {
			 type = IOR;
			 addr = interruptCtlrDistr + 0x08;
			 size = 4;
		}

		register ICDISER0 {
			 type = IOR;
			 addr = interruptCtlrDistr + 0x100;
			 size = 4;
		}

		register ICDISER1 {
			 type = IOR;
			 addr = interruptCtlrDistr + 0x104;
			 size = 4;
		}

		register ICDISER2 {
			 type = IOR;
			 addr = interruptCtlrDistr + 0x108;
			 size = 4;
		}

		register ICDICER0 {
			 type = IOR;
			 addr = interruptCtlrDistr + 0x180;
			 size = 4;
		}

		register ICDICER1 {
			 type = IOR;
			 addr = interruptCtlrDistr + 0x184;
			 size = 4;
		}

		register ICDICER2 {
			 type = IOR;
			 addr = interruptCtlrDistr + 0x188;
			 size = 4;
		}

		register ICDIPR0 {
			 type = IOR;
			 addr = interruptCtlrDistr + 0x400;
			 size = 4;
		}

		register ICDIPR1 {
			 type = IOR;
			 addr = interruptCtlrDistr + 0x404;
			 size = 4;
		}
		
		register ICDIPR20 {
			 type = IOR;
			 addr = interruptCtlrDistr + 0x450;
			 size = 4;
		}

		register ICDIPTR0 {
			 type = IOR;
			 addr = interruptCtlrDistr + 0x800;
			 size = 4;
		}

		register ICDIPTR1 {
			 type = IOR;
			 addr = interruptCtlrDistr + 0x804;
			 size = 4;
		}

		register ICDIPTR2 {
			 type = IOR;
			 addr = interruptCtlrDistr + 0x808;
			 size = 4;
		}

		register ICDIPTR20 {
			 type = IOR;
			 addr = interruptCtlrDistr + 0x850;
			 size = 4;
		}

		register ICDICFR0 {
			 type = IOR;
			 addr = interruptCtlrDistr + 0xC00;
			 size = 4;
		}

		register ICDICFR1 {
			 type = IOR;
			 addr = interruptCtlrDistr + 0xC04;
			 size = 4;
		}

		register ICDICFR2 {
			 type = IOR;
			 addr = interruptCtlrDistr + 0xC08;
			 size = 4;
		}

		register ICDICFR3 {
			 type = IOR;
			 addr = interruptCtlrDistr + 0xC0C;
			 size = 4;
		}

		register ICDICFR4 {
			 type = IOR;
			 addr = interruptCtlrDistr + 0xC10;
			 size = 4;
		}

		register ICDICFR5 {
			 type = IOR;
			 addr = interruptCtlrDistr + 0xC14;
			 size = 4;
		}

		# UART0 registers
		
		register UART0_CR {
			 type = IOR;
			 addr = uartController + 0x00;
			 size = 4;
		}
		
		register UART0_MR {
			 type = IOR;
			 addr = uartController + 0x04;
			 size = 4;
		}
		
		register UART0_IER {
			 type = IOR;
			 addr = uartController + 0x08;
			 size = 4;
		}
		
		register UART0_IDR {
			 type = IOR;
			 addr = uartController + 0x0c;
			 size = 4;
		}
		
		register UART0_IMR {
			 type = IOR;
			 addr = uartController + 0x10;
			 size = 4;
		}
		
		register UART0_ISR {
			 type = IOR;
			 addr = uartController + 0x14;
			 size = 4;
		}
		
		register UART0_BAUDGEN {
			 type = IOR;
			 addr = uartController + 0x18;
			 size = 4;
		}
		
		register UART0_RXTOUT {
			 type = IOR;
			 addr = uartController + 0x1c;
			 size = 4;
		}
		
		register UART0_RX_FIFO_LEVEL {
			 type = IOR;
			 addr = uartController + 0x20;
			 size = 4;
		}
		
		register UART0_MODEMCR {
			 type = IOR;
			 addr = uartController + 0x24;
			 size = 4;
		}
		
		register UART0_MODEMSR {
			 type = IOR;
			 addr = uartController + 0x28;
			 size = 4;
		}
		
		register UART0_SR {
			 type = IOR;
			 addr = uartController + 0x2c;
			 size = 4;
		}
		
		register UART0_FIFO {
			 type = IOR;
			 addr = uartController + 0x30;
			 size = 4;
		}
		
		register UART0_BAUDDIV {
			 type = IOR;
			 addr = uartController + 0x34;
			 size = 4;
		}
		
		register UART0_FLOWDELAY {
			 type = IOR;
			 addr = uartController + 0x38;
			 size = 4;
		}
		
		register UART0_TX_FIFO_LEVEL {
			 type = IOR;
			 addr = uartController + 0x44;
			 size = 4;
		}
		
		# UART1 registers
		
		register UART1_CR {
			 type = IOR;
			 addr = uartController + 0x1000;
			 size = 4;
		}
		
		register UART1_MR {
			 type = IOR;
			 addr = uartController + 0x1004;
			 size = 4;
		}
		
		register UART1_IER {
			 type = IOR;
			 addr = uartController + 0x1008;
			 size = 4;
		}
		
		register UART1_IDR {
			 type = IOR;
			 addr = uartController + 0x100c;
			 size = 4;
		}
		
		register UART1_IMR {
			 type = IOR;
			 addr = uartController + 0x1010;
			 size = 4;
		}
		
		register UART1_ISR {
			 type = IOR;
			 addr = uartController + 0x1014;
			 size = 4;
		}
		
		register UART1_BAUDGEN {
			 type = IOR;
			 addr = uartController + 0x1018;
			 size = 4;
		}
		
		register UART1_RXTOUT {
			 type = IOR;
			 addr = uartController + 0x101c;
			 size = 4;
		}
		
		register UART1_RX_FIFO_LEVEL {
			 type = IOR;
			 addr = uartController + 0x1020;
			 size = 4;
		}
		
		register UART1_MODEMCR {
			 type = IOR;
			 addr = uartController + 0x1024;
			 size = 4;
		}
		
		register UART1_MODEMSR {
			 type = IOR;
			 addr = uartController + 0x1028;
			 size = 4;
		}
		
		register UART1_SR {
			 type = IOR;
			 addr = uartController + 0x102c;
			 size = 4;
		}
		
		register UART1_FIFO {
			 type = IOR;
			 addr = uartController + 0x1030;
			 size = 4;
		}
		
		register UART1_BAUDDIV {
			 type = IOR;
			 addr = uartController + 0x1034;
			 size = 4;
		}
		
		register UART1_FLOWDELAY {
			 type = IOR;
			 addr = uartController + 0x1038;
			 size = 4;
		}
		
		register UART1_TX_FIFO_LEVEL {
			 type = IOR;
			 addr = uartController + 0x1044;
			 size = 4;
		}

		# SPI1 registers

		register SPI1_CR {	
			 type = IOR;
			 addr = spiController + 0x7000;
			 size = 4;
		}

		register SPI1_ER {	
			 type = IOR;
			 addr = spiController + 0x7014;
			 size = 4;
		}

		register SPI1_SR {	
			 type = IOR;
			 addr = spiController + 0x7004;
			 size = 4;
		}

		register SPI1_TXD {	
			 type = IOR;
			 addr = spiController + 0x701c;
			 size = 4;
		}

		register SPI1_RXD {	
			 type = IOR;
			 addr = spiController + 0x7020;
			 size = 4;
		}

		register SPI1_IER {	
			 type = IOR;
			 addr = spiController + 0x7008;
			 size = 4;
		}

		register SPI1_IDR {	
			 type = IOR;
			 addr = spiController + 0x700c;
			 size = 4;
		}

	}
	
	reginit {
		SLCR_UNLOCK = 0xdf0d;			# unlock SLCR
		REBOOT_STATUS = 0;				# clear all bits set by on-chip ROM
		SLCR_LOCK = 0x767b;				# lock SLCR
	}
	
}